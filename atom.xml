<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://abigrookie.github.io</id>
    <title>hodgepodge</title>
    <updated>2022-11-23T05:49:58.594Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://abigrookie.github.io"/>
    <link rel="self" href="https://abigrookie.github.io/atom.xml"/>
    <subtitle>LOOK FORWARD AND MOVE ON</subtitle>
    <logo>https://abigrookie.github.io/images/avatar.png</logo>
    <icon>https://abigrookie.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, hodgepodge</rights>
    <entry>
        <title type="html"><![CDATA[Gym用户自定义环境]]></title>
        <id>https://abigrookie.github.io/post/gym-yong-hu-zi-ding-yi-huan-jing/</id>
        <link href="https://abigrookie.github.io/post/gym-yong-hu-zi-ding-yi-huan-jing/">
        </link>
        <updated>2022-11-23T02:26:05.000Z</updated>
        <content type="html"><![CDATA[<p>Gym官方教程：<a href="'https://www.gymlibrary.dev/content/environment_creation/'">https://www.gymlibrary.dev/content/environment_creation/</a></p>
<h2 id="创建自定义环境工程">创建自定义环境工程</h2>
<ul>
<li>方法一：git clone gym-examples
<ul>
<li>从github上克隆Gym官方示例到本地进行自定义环境编写</li>
</ul>
</li>
</ul>
<pre><code class="language-bash"># git clone from gym-examples
git clone https://github.com/Farama-Foundation/gym-examples
cd gym-examples
python -m venv .env
source .env/bin/activate
pip install -e .
</code></pre>
<ul>
<li>方法二：自建环境工程文件
<ul>
<li>自建环境工程文件，文件目录应如下（只列出必要文件）</li>
</ul>
</li>
</ul>
<pre><code class="language-bash">my-gym/
    setup.py
    my_gym/
        __init__.py
        envs/   
            __init__.py
            myenv.py
        wrappers/
            __init__.py
            relative_position.py（不必须）
</code></pre>
<h2 id="设计环境">设计环境</h2>
<p>自定义环境通常只需关注myenv的编写，myenv.py文件的整体框架如下：</p>
<pre><code class="language-python">import gym
import numpy as np
from typing import Optional
import torch
from gym import spaces
import math

class MyEnv(gym.Env):
    def __init__(self, args1, args2, ...):
        super().__init__()

        self.args1 = args1
        self.args2 = args2
        ...

        # define action space
        # gym doc:
        # https://www.gymlibrary.dev/api/spaces/
        self.action_space = spaces.Discrete(ACTION_SPACE)

        # define observation space
        self.observation_space = spaces.Discrete(OBSERVATION_SPACE)

    # not necessary
    def _get_obs(self):
        return obs
    
    # not necessary
    def _get_info(self):
        return info
    
    
    def step(self, action):
        # input the action and step to next state
        # return the next_obs, reward, done and info
        return obs, reward, done, {}

    def reset(self, seed=None, options=None):
        # set ramdom seed if need
        super().reset(seed=seed)
        # reset the start observation and some parameters
        self.state = START_STATE
        self.paras1= PARAS1
        ...
        # return the start observation and info
        return observation, info

    def render(self, mode='human', close=False):
        # render the environments
        # can simply print some infomation of your training process
        print(f'Step:{self.count}')
        print(f'State:{self.state}')
</code></pre>
<h2 id="修改配置文件">修改配置文件</h2>
<h3 id="注册环境">注册环境</h3>
<ul>
<li>为了保证Gym能够检测到用户自定义的环境，需要在/my-gym/my_gym/_<em>init</em>_.py中对环境进行注册</li>
</ul>
<pre><code class="language-python">from gym.envs.registration import register

register(
    # the id of your env, which can be used to during environment creation
    id=&quot;MyEnv&quot;,
    # the entry point is the path of your env
    entry_point=&quot;my_gym.envs:myenv&quot;,
    # other parameters can be found at 
    # https://www.gymlibrary.dev/content/environment_creation/
)
</code></pre>
<ul>
<li>同时在/my-gym/my_gym/envs/_<em>init</em>_.py下需要如下设置</li>
</ul>
<pre><code class="language-python">from my_gym.envs.myenv import MyEnv
</code></pre>
<h3 id="创建包">创建包</h3>
<ul>
<li>最后一步将环境工程文件构建为一个python包，需要配置/my-gym/setup.py，简单示例如下</li>
</ul>
<pre><code class="language-python">from setuptools import setup

setup(
    name=&quot;my_gym&quot;,
    version=&quot;0.0.1&quot;,
    install_requires=[&quot;gym==0.26.0&quot;, &quot;pygame==2.1.0&quot;],
)
</code></pre>
<h3 id="安装包">安装包</h3>
<ul>
<li>在需要安装自定义环境的python环境下，通过pip安装自定义环境</li>
</ul>
<pre><code class="language-bash">pip install -e USER_DEFINE_ENV_PATH
</code></pre>
<h3 id="加载环境">加载环境</h3>
<pre><code class="language-python">import my_gym
import gym
env = gym.make('MyEnv')
</code></pre>
<p>到此，一个简单的用户自定义环境就配置完成啦🎉🎉🎉</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zotero使用笔记]]></title>
        <id>https://abigrookie.github.io/post/zotero-shi-yong-bi-ji/</id>
        <link href="https://abigrookie.github.io/post/zotero-shi-yong-bi-ji/">
        </link>
        <updated>2022-11-21T08:13:02.000Z</updated>
        <content type="html"><![CDATA[<h2 id="插件推荐">插件推荐</h2>
<p>插件安装步骤：</p>
<p>zotero首页→工具→插件→Install Add-on From File→上传插件的xpi文件→重启应用生效</p>
<ul>
<li>
<p>DOI Manager</p>
<ul>
<li>
<p>功能：获取文献的DOI号，和SCI-hub配合获取文献的全文pdf</p>
</li>
<li>
<p>链接：<a href="https://github.com/bwiernik/zotero-shortdoi" title="https://github.com/bwiernik/zotero-shortdoi">https://github.com/bwiernik/zotero-shortdoi</a></p>
</li>
<li>
<p>使用：右键选择Manage DOIs-&gt;选择Get long DOIs</p>
<figure data-type="image" tabindex="1"><img src="https://abigrookie.github.io/post-images/%E6%97%A0%E6%A0%87%E9%A2%98_MSGarro4z6.png" alt="" title="右键选择Manage DOIs-&gt;选择Get long DOIs" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>Zotero PDF Translate</p>
<ul>
<li>
<p>功能：PDF翻译</p>
</li>
<li>
<p>链接：<a href="https://github.com/windingwind/zotero-pdf-translate" title="https://github.com/windingwind/zotero-pdf-translate">https://github.com/windingwind/zotero-pdf-translate</a></p>
</li>
<li>
<p>使用：安装后，选中pdf中需要翻译字段即可翻译</p>
</li>
</ul>
</li>
<li>
<p>Zotero Scholar Rank &amp; Zotero updateifsE</p>
<ul>
<li>
<p>功能：查询文献CCF和SCI等级（有时候文献自动识别错误会导致查询不准）</p>
</li>
<li>
<p>Zotero Scholar Rank链接：<a href="https://github.com/SiriusXT/Zotero-Scholar-Rank" title="https://github.com/SiriusXT/Zotero-Scholar-Rank">https://github.com/SiriusXT/Zotero-Scholar-Rank</a></p>
</li>
<li>
<p>Zotero updateifsE链接：<a href="https://github.com/redleafnew/zotero-updateifsE" title="https://github.com/redleafnew/zotero-updateifsE">https://github.com/redleafnew/zotero-updateifsE</a></p>
</li>
<li>
<p>使用：详见插件首页</p>
</li>
</ul>
</li>
</ul>
<h2 id="使用技巧">使用技巧</h2>
<ul>
<li>
<p>zotero Connector</p>
<ul>
<li>
<p>功能：一款Google网页插件，可以快速将网页上的文献下载到zotero（若无法直接获取pdf，可以使用doi manager和sci hub配合获取pdf）</p>
</li>
<li>
<p>使用：谷歌Chrome应用商店搜索zotero Connector→在文献网页启动插件→点击插件选择将文献保存到指定目录中</p>
<figure data-type="image" tabindex="2"><img src="https://abigrookie.github.io/post-images/1669019185158.png" alt="" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>SCI-hub路径选择</p>
<ul>
<li>
<p>功能：zotero获取可用pdf经常出现找不到的情况，将sci hub路径添加到zotero中，增大获取pdf的成功率：</p>
</li>
<li>
<p>使用：zotero首页→编辑→首选项→高级→高级设置→设置编辑器→搜索框输入&quot;findpdf&quot;→点击替换一下内容到输入框→ok→对于没有pdf的文献右键→找到可用的pdf</p>
<pre><code class="language-json">{ 
  &quot;name&quot;:&quot;sci-hub&quot;, 
  &quot;method&quot;:&quot;GET&quot;,    
  &quot;url&quot;:&quot;https://sci-hub.st/{doi}&quot;,    
  &quot;mode&quot;:&quot;html&quot;,&quot;selector&quot;:&quot;#pdf&quot;,    
  &quot;attribute&quot;:&quot;src&quot;,
  &quot;automatic&quot;:true
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://abigrookie.github.io/post-images/1669018079282_9nJpBUXqWu.png" alt="" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git使用]]></title>
        <id>https://abigrookie.github.io/post/git-shi-yong/</id>
        <link href="https://abigrookie.github.io/post/git-shi-yong/">
        </link>
        <updated>2022-11-19T09:01:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git">Git</h1>
<ul>
<li>
<p>fork项目同步</p>
<pre><code class="language-bash"># 1.clone
$ git clone git@github.com:XXXX/XXXX.git

# 2.remote(source repo)
$ git remote add upstream git@github.com:XXXX/XXXX.git
# how to delete upstream
$ git remote rm upstream

# 3.change to master branch(check brance before checkout)
$ git checkout master

# 4.fetch upstream
$ git fetch upstream

# 5.merge branch
$ git merge upstream/master

# 6.push to fork repo
$ git push origin master
</code></pre>
</li>
<li>
<p>项目上传</p>
<pre><code class="language-bash"># 生成ssh key
ssh-keygen -t rsa -C &quot;email@address&quot;

# github-setting-ssh-add new ssh key

# install git if git not exists
sudo apt-get install git

# cd the project directory and init the git
git init

# add the files need to upload
# if want upload all files under the directory
git add ./

# check the status of git
git status

# submit the modification to the local repository
git commit -m &quot;notes&quot;

# add user name and user email
git config --global user.email &quot;email address&quot;
git config --global user.name &quot;user name&quot;

# create a remote repository named origin
git remote add origin SSH_KEY_OF_REPO

# add files into origin
git remote set-url origin SSH_KEY_OF_REPO

# push to upload
git push origin master
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://abigrookie.github.io/post/hello-gridea/</id>
        <link href="https://abigrookie.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>